// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model SelectedItem {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  isInCart     Boolean @default(false)
  isInWishlist Boolean @default(false)
  itemId       String  @db.ObjectId
  item         Item    @relation(fields: [itemId], references: [id])
  color        String?
  quantity     Int     @default(1)
  size         String?
  order        Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String? @db.ObjectId
  user         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String? @db.ObjectId
}

model Order {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  items       SelectedItem[]
  orderedBy   User           @relation(fields: [orderedById], references: [id])
  orderedById String         @db.ObjectId
}

model Item {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  image        String
  category     String
  name         String
  brand        String
  price        Float
  details      ItemDetails    @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  detailsId    String         @unique @db.ObjectId
  SelectedItem SelectedItem[]
}

model ItemDetails {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  sizes    String[]
  colors   String[]
  fabric   String
  pattern  String
  fit      String
  neck     String
  sleeve   String
  style    String
  item     Item?
  comments Comment[]
}

model Comment {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  author        String
  rating        Float
  createdAt     DateTime     @default(now())
  itemDetails   ItemDetails? @relation(fields: [itemDetailsId], references: [id])
  itemDetailsId String?      @db.ObjectId
}

model Address {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  surname    String
  city       String
  address    String
  postalCode String
  phone      String
  isDefault  Boolean? @default(false)
  tags       String[]
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?  @db.ObjectId
}

// Necessary for Next auth
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  phone         String?
  address       Address[]
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  selectedItems SelectedItem[]
  order         Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
